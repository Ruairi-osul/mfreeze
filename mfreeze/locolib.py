import cv2
import numpy as np
from .utils import _parse_crop_settings, _crop_frame
from scipy.ndimage.measurements import center_of_mass


def reference_create(
    video_path,
    num_frames=200,
    start_frame=0,
    stop_frame=None,
    crop_interactive=None,
    crop_cmin=None,
    crop_cmax=None,
    crop_rmin=None,
    crop_rmax=None,
):
    """
    Create a reference image.

    The references image is used for location tracking. It is generated by averaging over
    many frames.

    Args:
        video_path (str): Path to the video
        num_frames (int): The number of frames to use when generating the reference.
        start_frame (int): The first frame to use.
        stop_frame (int): The final frame to use. Defaults to the last frame.
        crop_interactive (holoviews.streams.BoxEdit): Holoviews stream object to use if using the interactive cropping
                                                      functionality. This can be obtained from the mfreeze.video.crop
                                                      function.
        crop_cmin (int): Optional value for manual cropping. Specifies minimum column value for each frame.
        crop_cmax (int): Optional value for manual cropping. Specifies maximum column value for each frame.
        crop_rmin (int): Optional value for manual cropping. Specifies minimum row value for each frame.
        crop_rmax (int): Optional value for manual cropping. Specifies maximum row values for each frame.
    Returns:
        A single reference image
    """
    cap = cv2.VideoCapture(video_path)
    cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
    stop_frame = (
        int(cap.get(cv2.CAP_PROP_FRAME_COUNT)) if stop_frame is None else stop_frame
    )

    frame_idx = np.random.randint(low=start_frame, high=stop_frame - 1, size=num_frames)
    _, frame = cap.read()
    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    frame_nrow, frame_ncol = frame.shape
    using_crop, crop_settings = _parse_crop_settings(
        frame_nrow,
        frame_ncol,
        crop_interactive,
        crop_cmin,
        crop_cmax,
        crop_rmin,
        crop_rmax,
    )
    if using_crop:
        frame = _crop_frame(frame, *crop_settings)
    frame_nrow, frame_ncol = frame.shape
    frame_mat = np.empty(shape=(num_frames, frame_nrow, frame_ncol))
    for i, ind in enumerate(frame_idx):
        cap.set(cv2.CAP_PROP_POS_FRAMES, ind)
        frame_present, frame = cap.read()
        if frame_present:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            if using_crop:
                frame = _crop_frame(frame, *crop_settings)
            frame_mat[i, :, :] = frame
        else:
            frame_mat = frame_mat[:i, :, :]
    ref_frame = np.median(frame_mat, axis=0)
    return ref_frame.astype("uint8")


def track_location(
    video_path,
    ref_frame,
    thresh=99,
    start_frame=0,
    stop_frame=None,
    crop_interactive=None,
    crop_cmin=None,
    crop_cmax=None,
    crop_rmin=None,
    crop_rmax=None,
):
    """
    Track the location of the largest object in the frame.

    Tracking is performed by a method involving subtracting a reference frame from each frame and
    applying a threshold.

    Args:
        video_path (str): Path to the video
        ref_frame (arraylike): The reference frame to use. Can be generated from mfreeze.locolib.reference_create
        thresh (float): A value between 0 and 100. Change this value if the location parameter is performing poorly.
        start_frame (int): The first frame to use.
        stop_frame (int): The final frame to use. Defaults to the last frame.
        crop_interactive (holoviews.streams.BoxEdit): Holoviews stream object to use if using the interactive cropping
                                                      functionality. This can be obtained from the mfreeze.video.crop
                                                      function.
        crop_cmin (int): Optional value for manual cropping. Specifies minimum column value for each frame.
        crop_cmax (int): Optional value for manual cropping. Specifies maximum column value for each frame.
        crop_rmin (int): Optional value for manual cropping. Specifies minimum row value for each frame.
        crop_rmax (int): Optional value for manual cropping. Specifies maximum row values for each frame.
    Returns:
        The estimated position of the tracked object. A (n_frames, 2) numpy array with rows corresponding to the
        row and column position of the mouse for a given frame.
    """

    cap = cv2.VideoCapture(video_path)
    stop_frame = (
        int(cap.get(cv2.CAP_PROP_FRAME_COUNT)) if stop_frame is None else stop_frame
    )
    num_frames = stop_frame - start_frame
    cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)
    _, frame_old = cap.read()
    frame_old = cv2.cvtColor(frame_old, cv2.COLOR_BGR2GRAY)
    frame_nrow, frame_ncol = frame_old.shape
    using_crop, crop_settings = _parse_crop_settings(
        frame_nrow,
        frame_ncol,
        crop_interactive,
        crop_cmin,
        crop_cmax,
        crop_rmin,
        crop_rmax,
    )
    if using_crop:
        frame_old = _crop_frame(frame_old, *crop_settings)

    x_y = np.empty((num_frames, 2)).astype("uint16")

    for i in range(num_frames - 1):
        frame_present, frame_new = cap.read()
        if frame_present:
            frame_new = cv2.cvtColor(frame_new, cv2.COLOR_BGR2GRAY)
            if using_crop:
                frame_new = _crop_frame(frame_new, *crop_settings)
            diff = cv2.absdiff(ref_frame, frame_new)
            diff[diff < np.percentile(diff, thresh)] = 0
            x_y[i, :] = center_of_mass(diff)
    return x_y
